C: Gradually learn multiple technologies and combine them in a stress test v001
(please correct let me know if concepts are wrongly used or can be improved)

Concepts:
- Ubuntu Server
- Vim - practice Vim
- Git - practice git
- Collectd
- Graphite
- Apache2
- Redis


1. Setup an empty Ubuntu Server (14.04.3) on any hypervisor:
------------------------------------------------------------
- UTC as Timezone
- Select OpenSSH server on Software Selection

2. Prepare Ubuntu Server as development and demo environment:
-------------------------------------------------------------
## add your server-ip with a name to your hosts file for easy use
$ ssh poc@pocserver

## first upgrade to latest packages
$ sudo apt-get update && sudo apt-get upgrade

## install some useful packages, personal preference, if not installed yet ... to be discussed
$ sudo apt-get install curl git vim ssh
$ sudo apt-get install htop sysstat nethogs slurm smem
$ sudo apt-get install python-pip

## sudo without password (on development just to avoid pulling hair out of frustration)
$ sudo vim /etc/sudoers.d/moresudoers      #can be any name you want
myusername ALL=(ALL) NOPASSWD:ALL

## install my own vimrc to feel home
$ cd /tmp; git clone https://github.com/aldwinaldwin/vimrc
$ cd vimrc; ./install.sh
$ cd ..; rm -rf vimrc
# repeat the same as root, cause I prefer to work as root sometimes although it's not adviced in production environment

todo v002: add datadisk to system, if restarting with clean system disk, datadisk can be reused

---------------------------------------------------
** Sorry, from now on, working as root user mostly.
** Some say, it's really bad habit so:
** You can use all commands with sudo if you want
---------------------------------------------------

## create data directory and working directories
$ mkdir -p /data; cd /data


3. Practice git
---------------
$ mkdir /data/git; cd /data/git

## create account on github.com if you don't have one yet and setup your environment
$ git config --global user.name "myusername"
$ git config --global user.email "myusername@users.noreply.github.com"

## create new git and push to github.com
$ git init
$ git commit --allow-empty -m 'Initial commit'
$ git remote add origin https://github.com/myusername/pocproject
#create your new repository via github.com
$ git push -u origin master --force

## add file and push to github.com
$ mkdir 001
$ vim 001/info.txt   #past this info
$ git add 001/info.txt
$ git commit -m "added 001/info.txt"
$ git push -u origin master   #push to github.com

## git info
$ git status
$ git diff
$ git log --graph --decorate --all
$ git log -p
$ git branch
$ git branch -r  #remote
$ git branch -a  #= git branch + git branch -r
$ git reflog
$ git ls-files . --exclude-standard --others     #see files that aren't added yet


4. Server usage info via collectd+graphite+apache
-------------------------------------------------
$ apt-get install collectd
$ apt-get install apache2 libapache2-mod-wsgi
$ apt-get install graphite-web
$ apt-get install python-rrdtool

$ cd /etc/apache2/sites-available/
$ ln -s /usr/share/graphite-web/apache2-graphite.conf
$ vim apache2-graphite.conf   #port 8001
$ vim ../ports.conf    #port 8001
$ a2dissite 000-default
$ a2ensite apache2-graphite

$ cd /usr/lib/python2.7/dist-packages/graphite/
$ python manage.py syncdb   #root:mypasswd
$ cd /var/lib/graphite
$ chown www-data:www-data graphite.db
$ chmod 666 graphite.db

$ cd /etc/graphite
$ vim local_settings.py
#STORAGE_DIR
#WHISPER_DIR
RRD_DIR = '/var/lib/collectd/rrd'   #!! different directory
DATA_DIRS = [RRD_DIR]
TIME_ZONE = 'Etc/UCT'   #servers like utc
$ vim /etc/collectd/collectd.conf
Hostname "poc"
$ service collectd start
$ service apache2 restart

home$ ssh poc@pocserver -L 8001:127.0.0.1:8001    #Browser http://localhost:8001
#Or   http://pocserver:8001
#login: root  mypasswd

=> No Joy !!!
$ apt-get install graphite-carbon
$ service apache2 restart
=> Joy !!!
$ apt-get purge graphite-carbon
=> Still Joy ???  why?
---Debug: try install python-twisted-core next time -------------
Processing triggers for python-twisted-core (13.2.0-1ubuntu1) ...
Processing triggers for ureadahead (0.100.0-16) ...
Processing triggers for man-db (2.6.7.1-1ubuntu1) ...
Setting up graphite-carbon (0.9.12-3) ...
carbon-cache disabled in /etc/default/graphite-carbon
Processing triggers for python-twisted-core (13.2.0-1ubuntu1) ...
Processing triggers for ureadahead (0.100.0-16) ...
-----------------------------------------------------------------

5. Redis : queue and key/value store
------------------------------------

# Install and test
$ apt-get install redis-server
$ redis-benchmark -q -n 1000 -c 10 -P 5    #benchmark/test

# Configure
$ vim /etc/redis/redis.conf
tcp-keepalive 60                        #A reasonable value for this option is 60 seconds.
#bind 127.0.0.1                         #Make accessible to anyone
maxmemory-policy noeviction             #return errors when the memory limit was reached
appendonly yes                          #a little more persisten, save to disk
$ sudo service redis-server restart

# Test some commands : http://redis.io/commands
$ redis-cli
* Queue
LPUSH queue1 "hello world"  #or RPUSH
LLEN queue1
RPOP queue1                 #or BRPOP (listen until something in the queue) or LPOP or BLPOP
* Key/Value Cache
SET foo bar
GET foo
KEYS *                      # see all keys
* 16 databases
SELECT 1                    # 0-15
* Client
CLIENT SETNAME myuser
CLIENT GETNAME
* Admin
CLIENT LIST
DBSIZE                      #  amount of keys
CONFIG GET *
INFO
LASTSAVE                    # last save to disk

6. Python : Redis stress test
-----------------------------

$ pip install redis

# Push log info out of /var/log onto a queue :
$ python ./001/scripts/redisLPUSH.py
# Pop the info from the queue : $python ./001/scripts/redisBRPOP.py
# You could start the pop script first in one terminal, and the run the push simultaniously
# Test : Run the scripts from outside the server (adjust the ip address in the scripts) or from multiple servers
# Test : Open up a terminal with redis-cli and use MONITOR command to see what happens
# Test : Use command learned before to see queue size :
KEYS *
LLEN  testQueue
# Use graphite to see cpu/mem usage
# Test : Run redisLPUSH as many time till the memory is full (127.0.0.1:6379> INFO)

7. Mongo
--------

## Install: https://docs.mongodb.org/manual/tutorial/install-mongodb-on-ubuntu/
$ apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv EA312927
$ echo "deb http://repo.mongodb.org/apt/ubuntu trusty/mongodb-org/3.2 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-3.2.list
$ apt-get update
$ sudo apt-get install -y mongodb-org

## Keep this version when running upgrade:
$ echo "mongodb-org hold" | sudo dpkg --set-selections
$ echo "mongodb-org-server hold" | sudo dpkg --set-selections
$ echo "mongodb-org-shell hold" | sudo dpkg --set-selections
$ echo "mongodb-org-mongos hold" | sudo dpkg --set-selections
$ echo "mongodb-org-tools hold" | sudo dpkg --set-selections

# Test some commands:
$ mongo
> for( var i = 0; i < 20000; i++ ) { db.testCollection.insert({x:i,y:"hi"}); }
> show collections
> db.testCollection.count()
> db.testCollection.find().pretty()
> db.testCollection.drop()


